name: Version Bump & PR

on:
  push:
    branches:
      - development

permissions:
  contents: write

jobs:
  version-bump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore --no-cache

      - name: Get current version from csproj
        id: get_version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" src/EFCore.CrudKit.Library/EFCore.CrudKit.Library.csproj)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Bump version with prerelease support
        id: bump_version
        run: |
          FULL_VERSION="$VERSION"

          CORE_VERSION="${FULL_VERSION%%-*}"
          PRERELEASE="${FULL_VERSION#"$CORE_VERSION"}"
          PRERELEASE="${PRERELEASE#-}"

          IFS='.' read -r MAJOR MINOR PATCH <<<"$CORE_VERSION"

          if [ -z "$PRERELEASE" ] || [ "$PRERELEASE" = "$FULL_VERSION" ]; then
            PATCH=$((PATCH + 1))
            if [ "$PATCH" -gt 9 ]; then
              PATCH=0
              MINOR=$((MINOR + 1))
            fi
            if [ "$MINOR" -gt 9 ]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            fi
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            PR_LABEL="${PRERELEASE%%.*}"
            PR_NUM="${PRERELEASE#"$PR_LABEL."}"

            if ! [[ "$PR_NUM" =~ ^[0-9]+$ ]]; then
              PR_NUM=1
            else
              PR_NUM=$((PR_NUM + 1))
            fi

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-$PR_LABEL.$PR_NUM"
          fi

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update csproj with new version
        run: |
          sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|" src/EFCore.CrudKit.Library/EFCore.CrudKit.Library.csproj

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src/EFCore.CrudKit.Library/EFCore.CrudKit.Library.csproj
          git commit -m "Bump version to $NEW_VERSION [skip ci]"

      - name: Push version bump branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:refs/heads/version-bump --force

      - name: Install GitHub CLI
        run: |
          sudo snap install gh --classic

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Version bump to $NEW_VERSION" \
            --body "Automated version bump." \
            --base master \
            --head version-bump \
            --draft